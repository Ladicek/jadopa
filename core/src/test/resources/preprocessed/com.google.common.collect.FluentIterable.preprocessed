{@code FluentIterable} provides a rich interface for manipulating {@code Iterable} instances in a
chained fashion. A {@code FluentIterable} can be created from an {@code Iterable}, or from a set
of elements. The following types of methods are provided on {@code FluentIterable}:
<ul>
<li>chained methods which return a new {@code FluentIterable} based in some way on the contents
of the current one (for example {@link #transform})
<li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection or
array (for example {@link #toList})
<li>element extraction methods which facilitate the retrieval of certain elements (for example
{@link #last})
<li>query methods which answer questions about the {@code FluentIterable}'s contents (for example
{@link #anyMatch})
</ul>

<p>Here is an example that merges the lists returned by two separate database calls, transforms
it by invoking {@code toString()} on each element, and returns the first 10 elements as an
{@code ImmutableList}: <pre>   {@code

  FluentIterable
      .from(database.getClientList())
      .filter(activeInLastMonth())
      .transform(Functions.toStringFunction())
      .limit(10)
      .toList();}</pre>

<p>Anything which can be done using {@code FluentIterable} could be done in a different fashion
(often with {@link Iterables}), however the use of {@code FluentIterable} makes many sets of
operations significantly more concise.

@author Marcin Mikosik
@since 12.0